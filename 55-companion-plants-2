public Boolean companionPlants(List<String> plants) {
    //code here
    for (Integer i = 0; i < plants.size() - 1; i++) {
        String currentPlant = plants[i];
        String nextPlant = plants[i + 1];
        if (currentPlant == 'onions') {
            if (!(nextPlant == 'lettuce' || nextPlant == 'carrots' || nextPlant == 'tomatoes')) {
                return false;
            }
        } else if (currentPlant == 'lettuce') {
            if (!(nextPlant == 'cucumbers' || nextPlant == 'onions')) {
                return false;
            }
        } else if (currentPlant == 'cucumbers') {
            if (!(nextPlant == 'lettuce')) {
                return false;
            }
        } else if (currentPlant == 'carrots') {
            if (!(nextPlant == 'onions')) {
                return false;
            }
        } else if (currentPlant == 'tomatoes') {
            if (!(nextPlant == 'onions')) {
                return false;
            }
        } else {
            // If none of the above conditions are satisfied, the plants are not companions
            return false;
        }
    }
    return true; // All pairs are companions
}

// Example usage
/*List<String> plants1 = new List<String>{'onions', 'lettuce', 'onions', 'carrots', 'onions', 'lettuce', 'cucumbers'};
System.debug(isCompanion(plants1)); // Output: true

List<String> plants2 = new List<String>{'lettuce', 'onions', 'carrots', 'lettuce', 'cucumbers'};
System.debug(isCompanion(plants2)); // Output: false
This implementation iterates over each pair of plants and checks if they are companions according to the provided logic. It returns true only if all pairs of plants are companions, and false otherwise.*/






}